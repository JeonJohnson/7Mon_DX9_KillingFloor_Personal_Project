// Client.cpp : 응용 프로그램에 대한 진입점을 정의합니다.
//

#include "stdafx.h"
#include "Client.h"
#include "MainGame.h"

#define MAX_LOADSTRING 100

// 전역 변수:
HWND	g_hWnd;
#ifdef _DEBUG
HWND	g_hWnd_DEBUG;
#endif //_DEBUG
HINSTANCE hInst;                                // 현재 인스턴스입니다.
WCHAR szTitle[MAX_LOADSTRING];                  // 제목 표시줄 텍스트입니다.
WCHAR szWindowClass[MAX_LOADSTRING];            // 기본 창 클래스 이름입니다.

												// 이 코드 모듈에 들어 있는 함수의 정방향 선언입니다.
ATOM                MyRegisterClass(HINSTANCE hInstance);
BOOL                InitInstance(HINSTANCE, int);
LRESULT CALLBACK    WndProc(HWND, UINT, WPARAM, LPARAM);

int APIENTRY wWinMain(_In_ HINSTANCE hInstance,
	_In_opt_ HINSTANCE hPrevInstance,
	_In_ LPWSTR    lpCmdLine,
	_In_ int       nCmdShow)
{

	UNREFERENCED_PARAMETER(hPrevInstance);
	UNREFERENCED_PARAMETER(lpCmdLine);

	// TODO: 여기에 코드를 입력합니다.

	// 전역 문자열을 초기화합니다.
	LoadStringW(hInstance, IDS_APP_TITLE, szTitle, MAX_LOADSTRING);
	LoadStringW(hInstance, IDC_CLIENT, szWindowClass, MAX_LOADSTRING);
	MyRegisterClass(hInstance);

	// 응용 프로그램 초기화를 수행합니다.
	if (!InitInstance(hInstance, nCmdShow))
	{
		return FALSE;
	}

	HACCEL hAccelTable = LoadAccelerators(hInstance, MAKEINTRESOURCE(IDC_CLIENT));

	MSG msg;
	msg.message = WM_NULL;

#ifdef _DEBUG //동적할당 체크 하는 부분. //Memory Leak Check
	_CrtSetDbgFlag(_CRTDBG_ALLOC_MEM_DF | _CRTDBG_LEAK_CHECK_DF);
#endif // DEBUG
	//클라쪽 릭은 어디 파일에 몇번째 줄 나오는데
	//엔진쪽에서 생기는 릭은 그 숫자만 나오는거
	//여기 밑 함수안에 적어주면 거기서 중단점 걸림.
	//_CrtSetBreakAlloc(5363);

	MainGame::Get_Instance()->Initialize();

	//int* temp = new int;

	// 기본 메시지 루프입니다.
	while (WM_QUIT != msg.message)
	{
		if (PeekMessage(&msg, nullptr, 0, 0, PM_REMOVE))
		{
			TranslateMessage(&msg);
			DispatchMessage(&msg);
		}

		/* 우리 게임 로직 */
		MainGame::Get_Instance()->Process();
	}

	MainGame::Get_Instance()->Release();
	MainGame::Get_Instance()->Destroy_Instance();

	return (int)msg.wParam;
}



//
//  함수: MyRegisterClass()
//
//  목적: 창 클래스를 등록합니다.
//
ATOM MyRegisterClass(HINSTANCE hInstance)
{
	WNDCLASSEXW wcex;

	wcex.cbSize = sizeof(WNDCLASSEX);

	wcex.style = CS_HREDRAW | CS_VREDRAW;
	wcex.lpfnWndProc = WndProc;
	wcex.cbClsExtra = 0;
	wcex.cbWndExtra = 0;
	wcex.hInstance = hInstance;
	wcex.hIcon = LoadIcon(hInstance, MAKEINTRESOURCE(IDI_CLIENT));
	wcex.hCursor = LoadCursor(nullptr, IDC_ARROW);
	wcex.hbrBackground = (HBRUSH)(COLOR_WINDOW + 1);
	wcex.lpszMenuName = nullptr;
	wcex.lpszClassName = szWindowClass;
	wcex.hIconSm = LoadIcon(wcex.hInstance, MAKEINTRESOURCE(IDI_SMALL));

	return RegisterClassExW(&wcex);
}

//
//   함수: InitInstance(HINSTANCE, int)
//
//   목적: 인스턴스 핸들을 저장하고 주 창을 만듭니다.
//
//   설명:
//
//        이 함수를 통해 인스턴스 핸들을 전역 변수에 저장하고
//        주 프로그램 창을 만든 다음 표시합니다.
//
BOOL InitInstance(HINSTANCE hInstance, int nCmdShow)
{
	hInst = hInstance; // 인스턴스 핸들을 전역 변수에 저장합니다.

#ifdef _DEBUG
	RECT	DebugWindow_rect = { 0,0,WINCX_DEBUG,WINCY_DEBUG };
	AdjustWindowRect(&DebugWindow_rect, WS_OVERLAPPEDWINDOW, FALSE);
	HWND hWnd_DEBUG = CreateWindowW(szWindowClass, L"Debug Window", WS_OVERLAPPEDWINDOW,
		CW_USEDEFAULT, 0,
		DebugWindow_rect.right - DebugWindow_rect.left,
		DebugWindow_rect.bottom - DebugWindow_rect.top, nullptr, nullptr, hInstance, nullptr);

	if (!hWnd_DEBUG)
	{
		return FALSE;
	}

	g_hWnd_DEBUG = hWnd_DEBUG;

	SetWindowPos(hWnd_DEBUG, nullptr, (WINCX + 50), 0, 
		DebugWindow_rect.right - DebugWindow_rect.left,
		DebugWindow_rect.bottom - DebugWindow_rect.top, 0);

	ShowWindow(hWnd_DEBUG, nCmdShow);
	UpdateWindow(hWnd_DEBUG);
#endif //_DEBUG

	RECT rc = { 0, 0, WINCX, WINCY };
	AdjustWindowRect(&rc, WS_OVERLAPPEDWINDOW, FALSE);
	HWND hWnd = CreateWindowW(szWindowClass, L"Johnson3D", WS_OVERLAPPEDWINDOW,
		CW_USEDEFAULT, 0, 
		rc.right - rc.left, 
		rc.bottom - rc.top, nullptr, nullptr, hInstance, nullptr);

	if (!hWnd)
	{
		return FALSE;
	}

	g_hWnd = hWnd;

	SetWindowPos(hWnd, nullptr, 0,0, rc.right-rc.left, rc.bottom - rc.top,  0);
	ShowWindow(hWnd, nCmdShow);
	UpdateWindow(hWnd);



	return TRUE;
}

//
//  함수: WndProc(HWND, UINT, WPARAM, LPARAM)
//
//  목적:  주 창의 메시지를 처리합니다.
//
//  WM_COMMAND  - 응용 프로그램 메뉴를 처리합니다.
//  WM_PAINT    - 주 창을 그립니다.
//  WM_DESTROY  - 종료 메시지를 게시하고 반환합니다.
//
//
LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)
{
	switch (message)
	{
	case WM_DESTROY:
		PostQuitMessage(0);
		break;
	default:
		return DefWindowProc(hWnd, message, wParam, lParam);
	}
	return 0;
}